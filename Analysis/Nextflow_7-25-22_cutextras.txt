/*  GATK4 Variant Calling Pipeline
 *  Usage: nextflow run /path/to/main.nf
 *
 *  Author: Mohammed Khalfan < mkhalfan@nyu.edu > adapted by Cassandra Buzby
 *  NYU Center for Genetics and System Biology 2020
 */

// Setting some defaults here,
// can be overridden in config or via command line
params.out = "${params.outdir}/out"
params.tmpdir = "${params.outdir}/gatk_temp"

// Define modules here
BWA = 'bwa/intel/0.7.17'
PICARD = 'picard/2.17.11'
GATK = 'gatk/4.1.9.0'
R = 'r/intel/4.0.3'
SAMTOOLS = 'samtools/intel/1.14/'
BAMTOOLS = 'bamtools/intel/2.5.1'
BCFTOOLS = 'bcftools/intel/1.14'
MULTIQC = 'multiqc/1.9'
TRIMMOMATIC = 'trimmomatic/0.36'

// Define Reference Here
REF = '/scratch/cb4097/Sequencing/Reference/*.fna'

// Alternative to setup the reference file
ref = file(params.ref)

// Print some stuff here
println "reads: $params.reads"
println "ref: $params.ref"
println "output: $params.out"
println "gatk temp dir: $params.tmpdir"

##############################################################################################
Channel
    .fromFilePairs( params.reads, size: -1)
    { file -> file.getBaseName() - ~/${params.fcid}_/ - ~/n0[12]_/ - ~/.fastq/ }
    .ifEmpty { error "Cannot find any reads matching: ${params.reads}"  }
    .tap { read_pairs_ch }
    .subscribe({ num_samples += 1 })

##############################################################################################
Channel
    .fromFilePairs( params.reads, size: -1)
    { file -> file.getBaseName() - ~/${params.fcid}_/ - ~/n0[1]_/ - ~/.fastq/ }
    .ifEmpty { error "Cannot find any reads matching: ${params.reads}"  }
    .tap { read_pairs_ch }
    .subscribe({ num_samples += 1 })

##############################################################################################

##############################################################################################
process trim {
	// comments 
	publishDir "${params.out}/trimmed", mode:'copy'

	input:
	$1
	tuple pair_id,
        	file(reads) from read_pairs_ch

	output:
	$2.trimmed.fq.gz
    	tuple val(pair_id),
        	file(trimmed_file)
        	into trimmed_ch

	script:
	trimmed_file = "${pair_id}_trimmed.fq.gz"
	"""
	module load $GATK
	module load $BWA
	module load $PICARD
	
	java -jar /share/apps/trimmomatic/0.36/trimmomatic-0.36.jar SE -phred33 \
	       $1 $2.trimmed.fq.gz ILLUMINACLIP:TruSeq3-SE:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36
	
	"""
}

process align {
    publishDir "${params.out}/aligned_reads", mode:'copy'

    input:
    set pair_id,
        file(read_1) from trimmed_ch

    output:
    set val(pair_id), file("${pair_id}.aln-se.sam") \
        into aligned_reads_ch

    script:
    readGroup = \
        "@RG\\tID:${pair_id}\\tLB:${pair_id}\\tPL:ILLUMINA\\tPM:NOVASEQ\\tSM:${pair_id}"
    """
    module load $BWA
    #bwa mem -Y -K 100000000 -R "@RG\tID:$1\tLB:$1\tPL:ILLUMINA\tPM:NOVASEQ\tSM:$1" \
	#       $REF $1.trimmed.fq.gz > gR3.$1.aln-se.sam

    bwa mem -Y -K 100000000 -R \"${readGroup}\" \
	       $REF $read_1 > ${pair_id}.aln-se.sam
    """
}

process sort {
	// comments 
	publishDir "${params.out}/sorted", mode:'copy'

	input:
	set pair_id,
	    file(read_1) from aligned_reads_ch
	
	output:
	set val(pair_id), file("${pair_id}.aln-se.bam") \
        	into sorted_ch

	script:
	
	"""
	module load $GATK
	module load $BWA
	module load $PICARD
	
	java -jar $PICARD_JAR SortSam \
	          INPUT=$read_1 \
	          OUTPUT=${pair_id}.aln-se.bam \
	          SORT_ORDER=coordinate
	"""
}

##############################################################################################
##############################################################################################

##############################################################################################

process CB_1.1_trim.align.sort_all.q{
// comments 

input:

output:

script:
"""

module load $GATK
module load $BWA
module load $PICARD

REF=/scratch/cb4097/Sequencing/Reference/*.fna

#Trim data; input is file, then name
java -jar /share/apps/trimmomatic/0.36/trimmomatic-0.36.jar SE -phred33 \
        $1 $2.trimmed.fq.gz ILLUMINACLIP:TruSeq3-SE:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36

#Align to reference genome
bwa mem -Y -K 100000000 -R "@RG\tID:$1\tLB:$1\tPL:ILLUMINA\tPM:NOVASEQ\tSM:$1" \
       $REF $1.trimmed.fq.gz > $1.aln-se.sam

#Sort files
java -jar $PICARD_JAR SortSam \
          INPUT=$1.aln-se.sam \
          OUTPUT=$1.aln-se.bam \
          SORT_ORDER=coordinate
}


##############################################################################################

process MakeBQSRTable.q{
	// comments 	
	
	input:
	$1 $2	

	output:
	${1}_recal_data.table

	script:
	"""
	
	mmodule load $GATK
	module load $BWA
	module load $PICARD
	
	gatk BaseRecalibrator -R $REF -I $1 --known-sites $2 -O ${1}_recal_data.table
	
	"""
}

##############################################################################################

process ApplyBQSR.q{
// comments 

input:
${1}.bam ${2}recalibration.table

output:
${1}.bqsr.output.bam

script:
"""
module purge

module load $GATK
module load $BWA
module load $PICARD
module load $SAMTOOLS 

gatk ApplyBQSR \
   -R $REF \
   -I ${1}.bam \
   --bqsr-recal-file ${2}recalibration.table \
   -O ${1}.bqsr.output.bam
"""
}

##############################################################################################

process CB_2.0_merge.split.q{
// comments 

input:

output:

script:
"""
module load $GATK
module load $PICARD
module load $BWA
module load $SAMTOOLS 
module load $BAMTOOLS 

echo $2 $3 $4 $5
echo $1 "is the new merged file name"

#samtools merge HNGLVDRXY_gR_merged.bam gR*.bam
#samtools merge HNGLVDRXY_${1}_merged.bam $2

samtools merge $1 $2 $3 $4 $5
samtools index $1

#split the files
bamtools split -in $1 -reference


"""
}
##############################################################################################

process CB_2.1_.split.q{
// comments 

input:

output:

script:
"""
module load $GATK
module load $PICARD
module load $BWA
module load $SAMTOOLS 
module load $BAMTOOLS 

REF=/scratch/cb4097/Sequencing/Reference/*.fna

#split the files
bamtools split -in $1 -reference
"""
}

##############################################################################################

process CB_3.0_Index.q{
// comments 

input:

output:

script:
"""
module load $GATK
module load $PICARD
module load $BWA
module load $SAMTOOLS 
module load $BAMTOOLS 

cd /scratch/cb4097/Sequencing/HNGLVDRXY_Feb/

samtools index $1

"""
}


##############################################################################################

process CB_4.0_CallVariants_T.q{
// comments 

input:

output:

script:
"""
module load $GATK
module load $PICARD
module load $BWA
module load $SAMTOOLS 
module load $BAMTOOLS 

gatk HaplotypeCaller -I $1 -R $REF -ploidy 1 -XL excludedregions_NC.bed -O ${1}_T.vcf

#Extra script:
#gatk HaplotypeCaller -I $1 -R $REF -ploidy 1 -O ${1}.vcf
"""
}


##############################################################################################

process CB_5.0_zip.concat.sort.q{
// comments 

input:

output:

script:
"""

module load $BCFTOOLS 
module load $GATK

#Zip all of the vcfs (works)
for i in ${1}*vcf; do bgzip -c $i > ${i}.gz; done

#makes an index file for each vcf.gz (xargs separates them all by spaces)
#-p, --preset STR
#Input format for indexing. Valid values are: gff, bed, sam, vcf

echo ${1}*vcf.gz |  xargs -n1 tabix -p vcf

#concatenate all that have vcf.gz and name them unsortedcat.vcf (works)
bcftools concat -o ${1}unsortedcat.vcf -a -D ${1}*vcf.gz

#sort unsortedcat.vcf (works fine)
bcftools sort -Oz -o ${1}.SortedCat.vcf ${1}unsortedcat.vcf
#bcftools sort -Oz -o TEST2_MergedBQSR.SortedCat.vcf TEST2_unsortedcat.vcf

myfile=${1}.SortedCat.vcf

gatk VariantsToTable \
     -V ${myfile} \
     -F CHROM -F POS -F REF -F ALT \
     -GF AD -GF DP -GF GQ -GF PL \
     -O ${myfile}.output.table


#How I actually got it to work:

#gatk VariantsToTable \
#     -V TEST2_MergedBQSR.SortedCat.vcf \
#     -F CHROM -F POS -F REF -F ALT \
#     -GF AD -GF DP -GF GQ -GF PL \
#     -O TEST2_MergedBQSR.output.table
"""
}
